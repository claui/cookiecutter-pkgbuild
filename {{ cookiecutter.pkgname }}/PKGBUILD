# Maintainer: {{ cookiecutter.pkgbuild_maintainer }}

pkgname={{ cookiecutter.pkgname }}
{% if cookiecutter.gitpkgname != cookiecutter.pkgname -%}
_gitpkgname={{ cookiecutter.gitpkgname }}
{% endif -%}
pkgver={{ cookiecutter.pkgver }}
pkgrel=1
pkgdesc='{{ cookiecutter.pkgdesc }}'
{% if cookiecutter.is_python_package -%}
arch=('any')
{%- else -%}
arch=('x86_64')
{%- endif %}
url='https://github.com/Foo/foo'
license=('{{ cookiecutter.upstream_license }}')
# groups=()
depends=(
  {% if cookiecutter.is_python_package -%}
  'python'
  {% endif -%}
  ''
)
makedepends=(
  {% if cookiecutter.is_vcs -%}
  'git'
  {% endif -%}
  {% if cookiecutter.is_python_package -%}
  'python-build'
  # 'python-flit'
  # 'python-hatchling'
  # 'python-hatch-vcs'
  'python-installer'
  # 'python-pdm-backend'
  # 'python-poetry-core'
  # 'python-setuptools'
  # 'python-setuptools-scm'
  'python-sphinx'
  'python-sphinx_rtd_theme'
  'python-wheel'
  {% endif -%}
  ''
)
checkdepends=(
  {% if cookiecutter.is_python_package -%}
  'python-pytest'
  {% endif -%}
  ''
)
# optdepends=('baz: Use baz for quxing')
{% if cookiecutter.is_vcs -%}
provides=("{{ cookiecutter.pkgname_no_vcs }}=${pkgver}")
conflicts=('{{ cookiecutter.pkgname_no_vcs }}')
{%- else -%}
# provides=()
# conflicts=()
{%- endif %}
# replaces=()
# backup=()
# options=('!strip')
# install="${pkgname}.install"
# changelog=

source=(
  {% if cookiecutter.is_vcs -%}
  "{{ cookiecutter.pkgname_var }}::git+https://github.com/Foo/foo.git"
  {%- else -%}
  "{{ cookiecutter.src_subdir }}.tar.gz::https://github.com/Foo/foo/archive/v${pkgver}.tar.gz"
  {%- endif %}
)

sha512sums=(
  '{% if cookiecutter.is_vcs %}SKIP{%- else -%}00000000001{%- endif %}'
)

# noextract=("{{ cookiecutter.src_subdir }}.tar.gz")

{% if cookiecutter.is_vcs -%}
pkgver() {
  printf "r%s.%s" \
    "$(git -C "{{ cookiecutter.src_subdir }}" rev-list --count HEAD)" \
    "$(git -C "{{ cookiecutter.src_subdir }}" rev-parse --short HEAD)"
}

{% endif -%}
prepare() {
  cd "{{ cookiecutter.src_subdir }}"

}

build() {
  cd "{{ cookiecutter.src_subdir }}"
  {% if cookiecutter.is_python_package -%}
  echo >&2 'Building wheel'
  python -m build --wheel --no-isolation

  echo >&2 'Generating man page'
  sphinx-build -aqEW -b man docs docs/build/man

  echo >&2 'Generating HTML documentation'
  sphinx-build -aqEW -b singlehtml docs docs/build/singlehtml
  {%- endif %}
}

check() {
  cd "{{ cookiecutter.src_subdir }}"
  {% if cookiecutter.is_python_package -%}
  # local _site_packages
  # _site_packages="$(python -c 'import site; print(site.getsitepackages()[0])')"
  # python -m installer --destdir=tmp_install dist/*.whl

  echo >&2 'Running unit tests'
  pytest
  # PYTHONPATH="${PWD}/tmp_install/${_site_packages}" pytest
  # python -m unittest discover -v

  # echo >&2 'Testing the executable'
  # {{ cookiecutter.pkgname_var }} --version > actual.txt
  # if ! grep -qF "{{ cookiecutter.pkgname_var }} v${pkgver}" actual.txt; then
  #   printf >&2 '%s\n' 'Unexpected test output:' '==='
  #   cat >&2 actual.txt
  #   printf >&2 '\n%s\n' '==='
  #   exit 1
  # fi
  {%- endif %}
}

package() {
  cd "{{ cookiecutter.src_subdir }}"

  {% if cookiecutter.is_python_package -%}
  echo >&2 'Packaging the wheel'
  python -I -m installer --destdir="${pkgdir}" dist/*.whl
  {%- else -%}
  echo >&2 'Packaging the executable'
  install -D -m 755 -t "${pkgdir}/usr/bin" "bin/{{ cookiecutter.pkgname_var }}"
  {%- endif %}

  echo >&2 'Packaging the documentation'
  install -D -m 644 -t "${pkgdir}/usr/share/doc/${pkgname}" \
    README.md
  {% if cookiecutter.is_python_package -%}
  install -D -m 644 -t "${pkgdir}/usr/share/man/man1" \
    docs/build/man/*.1
  cp -R --preserve=mode -t "${pkgdir}/usr/share/doc/${pkgname}" \
    docs/build/singlehtml/{index.html,_static}
  {% endif %}
  echo >&2 'Packaging the license'
  install -D -m 644 -t "${pkgdir}/usr/share/licenses/${pkgname}" \
    LICENSE
}
